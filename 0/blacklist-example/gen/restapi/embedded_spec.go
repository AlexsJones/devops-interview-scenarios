// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Example API",
    "title": "Example API",
    "version": "0.0.1"
  },
  "basePath": "/v1",
  "paths": {
    "/blacklist": {
      "get": {
        "security": [],
        "description": "This responds with a 200 on success",
        "tags": [
          "blacklist"
        ],
        "summary": "Get blacklist endpoint",
        "operationId": "GetBlackList",
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Blacklist"
            }
          },
          "400": {},
          "404": {},
          "500": {}
        }
      }
    }
  },
  "definitions": {
    "Blacklist": {
      "type": "object",
      "title": "Blacklist",
      "properties": {
        "domains": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "principal": {
      "type": "object",
      "properties": {
        "companyId": {
          "type": "string"
        },
        "roles": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "userId": {
          "type": "string"
        },
        "userName": {
          "type": "string"
        }
      }
    }
  },
  "securityDefinitions": {
    "isAuthenticated": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    },
    "isRegistered": {
      "type": "basic"
    }
  },
  "security": [
    {
      "isAuthenticated": null
    }
  ],
  "tags": [
    {
      "description": "Lets you **view** blacklist. Can be run by any authenticated user in the system as long as they have the privileges to do so.\n",
      "name": "blacklist"
    }
  ]
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Example API",
    "title": "Example API",
    "version": "0.0.1"
  },
  "basePath": "/v1",
  "paths": {
    "/blacklist": {
      "get": {
        "security": [],
        "description": "This responds with a 200 on success",
        "tags": [
          "blacklist"
        ],
        "summary": "Get blacklist endpoint",
        "operationId": "GetBlackList",
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Blacklist"
            }
          },
          "400": {},
          "404": {},
          "500": {}
        }
      }
    }
  },
  "definitions": {
    "Blacklist": {
      "type": "object",
      "title": "Blacklist",
      "properties": {
        "domains": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "principal": {
      "type": "object",
      "properties": {
        "companyId": {
          "type": "string"
        },
        "roles": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "userId": {
          "type": "string"
        },
        "userName": {
          "type": "string"
        }
      }
    }
  },
  "securityDefinitions": {
    "isAuthenticated": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    },
    "isRegistered": {
      "type": "basic"
    }
  },
  "security": [
    {
      "isAuthenticated": []
    }
  ],
  "tags": [
    {
      "description": "Lets you **view** blacklist. Can be run by any authenticated user in the system as long as they have the privileges to do so.\n",
      "name": "blacklist"
    }
  ]
}`))
}
