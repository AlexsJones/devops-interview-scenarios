// Code generated by go-swagger; DO NOT EDIT.

package blacklist

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetBlackListHandlerFunc turns a function with the right signature into a get black list handler
type GetBlackListHandlerFunc func(GetBlackListParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetBlackListHandlerFunc) Handle(params GetBlackListParams) middleware.Responder {
	return fn(params)
}

// GetBlackListHandler interface for that can handle valid get black list params
type GetBlackListHandler interface {
	Handle(GetBlackListParams) middleware.Responder
}

// NewGetBlackList creates a new http.Handler for the get black list operation
func NewGetBlackList(ctx *middleware.Context, handler GetBlackListHandler) *GetBlackList {
	return &GetBlackList{Context: ctx, Handler: handler}
}

/*GetBlackList swagger:route GET /blacklist blacklist getBlackList

Get blacklist endpoint

This responds with a 200 on success

*/
type GetBlackList struct {
	Context *middleware.Context
	Handler GetBlackListHandler
}

func (o *GetBlackList) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetBlackListParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
